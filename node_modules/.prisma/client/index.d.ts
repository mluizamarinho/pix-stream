
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model MensagemPix
 * 
 */
export type MensagemPix = $Result.DefaultSelection<Prisma.$MensagemPixPayload>
/**
 * Model PixStream
 * 
 */
export type PixStream = $Result.DefaultSelection<Prisma.$PixStreamPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more MensagemPixes
 * const mensagemPixes = await prisma.mensagemPix.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more MensagemPixes
   * const mensagemPixes = await prisma.mensagemPix.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.mensagemPix`: Exposes CRUD operations for the **MensagemPix** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MensagemPixes
    * const mensagemPixes = await prisma.mensagemPix.findMany()
    * ```
    */
  get mensagemPix(): Prisma.MensagemPixDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pixStream`: Exposes CRUD operations for the **PixStream** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PixStreams
    * const pixStreams = await prisma.pixStream.findMany()
    * ```
    */
  get pixStream(): Prisma.PixStreamDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.13.0
   * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    MensagemPix: 'MensagemPix',
    PixStream: 'PixStream'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "mensagemPix" | "pixStream"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      MensagemPix: {
        payload: Prisma.$MensagemPixPayload<ExtArgs>
        fields: Prisma.MensagemPixFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MensagemPixFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MensagemPixFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload>
          }
          findFirst: {
            args: Prisma.MensagemPixFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MensagemPixFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload>
          }
          findMany: {
            args: Prisma.MensagemPixFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload>[]
          }
          create: {
            args: Prisma.MensagemPixCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload>
          }
          createMany: {
            args: Prisma.MensagemPixCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MensagemPixCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload>[]
          }
          delete: {
            args: Prisma.MensagemPixDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload>
          }
          update: {
            args: Prisma.MensagemPixUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload>
          }
          deleteMany: {
            args: Prisma.MensagemPixDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MensagemPixUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MensagemPixUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload>[]
          }
          upsert: {
            args: Prisma.MensagemPixUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MensagemPixPayload>
          }
          aggregate: {
            args: Prisma.MensagemPixAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMensagemPix>
          }
          groupBy: {
            args: Prisma.MensagemPixGroupByArgs<ExtArgs>
            result: $Utils.Optional<MensagemPixGroupByOutputType>[]
          }
          count: {
            args: Prisma.MensagemPixCountArgs<ExtArgs>
            result: $Utils.Optional<MensagemPixCountAggregateOutputType> | number
          }
        }
      }
      PixStream: {
        payload: Prisma.$PixStreamPayload<ExtArgs>
        fields: Prisma.PixStreamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PixStreamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PixStreamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload>
          }
          findFirst: {
            args: Prisma.PixStreamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PixStreamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload>
          }
          findMany: {
            args: Prisma.PixStreamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload>[]
          }
          create: {
            args: Prisma.PixStreamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload>
          }
          createMany: {
            args: Prisma.PixStreamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PixStreamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload>[]
          }
          delete: {
            args: Prisma.PixStreamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload>
          }
          update: {
            args: Prisma.PixStreamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload>
          }
          deleteMany: {
            args: Prisma.PixStreamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PixStreamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PixStreamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload>[]
          }
          upsert: {
            args: Prisma.PixStreamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PixStreamPayload>
          }
          aggregate: {
            args: Prisma.PixStreamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePixStream>
          }
          groupBy: {
            args: Prisma.PixStreamGroupByArgs<ExtArgs>
            result: $Utils.Optional<PixStreamGroupByOutputType>[]
          }
          count: {
            args: Prisma.PixStreamCountArgs<ExtArgs>
            result: $Utils.Optional<PixStreamCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    mensagemPix?: MensagemPixOmit
    pixStream?: PixStreamOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PixStreamCountOutputType
   */

  export type PixStreamCountOutputType = {
    mensagens: number
  }

  export type PixStreamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mensagens?: boolean | PixStreamCountOutputTypeCountMensagensArgs
  }

  // Custom InputTypes
  /**
   * PixStreamCountOutputType without action
   */
  export type PixStreamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStreamCountOutputType
     */
    select?: PixStreamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PixStreamCountOutputType without action
   */
  export type PixStreamCountOutputTypeCountMensagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MensagemPixWhereInput
  }


  /**
   * Models
   */

  /**
   * Model MensagemPix
   */

  export type AggregateMensagemPix = {
    _count: MensagemPixCountAggregateOutputType | null
    _avg: MensagemPixAvgAggregateOutputType | null
    _sum: MensagemPixSumAggregateOutputType | null
    _min: MensagemPixMinAggregateOutputType | null
    _max: MensagemPixMaxAggregateOutputType | null
  }

  export type MensagemPixAvgAggregateOutputType = {
    valor: number | null
  }

  export type MensagemPixSumAggregateOutputType = {
    valor: number | null
  }

  export type MensagemPixMinAggregateOutputType = {
    id: string | null
    endToEndId: string | null
    valor: number | null
    pagadorNome: string | null
    pagadorCpfCnpj: string | null
    pagadorIspb: string | null
    pagadorAgencia: string | null
    pagadorConta: string | null
    pagadorTipoConta: string | null
    recebedorNome: string | null
    recebedorCpfCnpj: string | null
    recebedorIspb: string | null
    recebedorAgencia: string | null
    recebedorConta: string | null
    recebedorTipoConta: string | null
    campoLivre: string | null
    txId: string | null
    dataHoraPagamento: Date | null
    pixStreamId: string | null
  }

  export type MensagemPixMaxAggregateOutputType = {
    id: string | null
    endToEndId: string | null
    valor: number | null
    pagadorNome: string | null
    pagadorCpfCnpj: string | null
    pagadorIspb: string | null
    pagadorAgencia: string | null
    pagadorConta: string | null
    pagadorTipoConta: string | null
    recebedorNome: string | null
    recebedorCpfCnpj: string | null
    recebedorIspb: string | null
    recebedorAgencia: string | null
    recebedorConta: string | null
    recebedorTipoConta: string | null
    campoLivre: string | null
    txId: string | null
    dataHoraPagamento: Date | null
    pixStreamId: string | null
  }

  export type MensagemPixCountAggregateOutputType = {
    id: number
    endToEndId: number
    valor: number
    pagadorNome: number
    pagadorCpfCnpj: number
    pagadorIspb: number
    pagadorAgencia: number
    pagadorConta: number
    pagadorTipoConta: number
    recebedorNome: number
    recebedorCpfCnpj: number
    recebedorIspb: number
    recebedorAgencia: number
    recebedorConta: number
    recebedorTipoConta: number
    campoLivre: number
    txId: number
    dataHoraPagamento: number
    pixStreamId: number
    _all: number
  }


  export type MensagemPixAvgAggregateInputType = {
    valor?: true
  }

  export type MensagemPixSumAggregateInputType = {
    valor?: true
  }

  export type MensagemPixMinAggregateInputType = {
    id?: true
    endToEndId?: true
    valor?: true
    pagadorNome?: true
    pagadorCpfCnpj?: true
    pagadorIspb?: true
    pagadorAgencia?: true
    pagadorConta?: true
    pagadorTipoConta?: true
    recebedorNome?: true
    recebedorCpfCnpj?: true
    recebedorIspb?: true
    recebedorAgencia?: true
    recebedorConta?: true
    recebedorTipoConta?: true
    campoLivre?: true
    txId?: true
    dataHoraPagamento?: true
    pixStreamId?: true
  }

  export type MensagemPixMaxAggregateInputType = {
    id?: true
    endToEndId?: true
    valor?: true
    pagadorNome?: true
    pagadorCpfCnpj?: true
    pagadorIspb?: true
    pagadorAgencia?: true
    pagadorConta?: true
    pagadorTipoConta?: true
    recebedorNome?: true
    recebedorCpfCnpj?: true
    recebedorIspb?: true
    recebedorAgencia?: true
    recebedorConta?: true
    recebedorTipoConta?: true
    campoLivre?: true
    txId?: true
    dataHoraPagamento?: true
    pixStreamId?: true
  }

  export type MensagemPixCountAggregateInputType = {
    id?: true
    endToEndId?: true
    valor?: true
    pagadorNome?: true
    pagadorCpfCnpj?: true
    pagadorIspb?: true
    pagadorAgencia?: true
    pagadorConta?: true
    pagadorTipoConta?: true
    recebedorNome?: true
    recebedorCpfCnpj?: true
    recebedorIspb?: true
    recebedorAgencia?: true
    recebedorConta?: true
    recebedorTipoConta?: true
    campoLivre?: true
    txId?: true
    dataHoraPagamento?: true
    pixStreamId?: true
    _all?: true
  }

  export type MensagemPixAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MensagemPix to aggregate.
     */
    where?: MensagemPixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MensagemPixes to fetch.
     */
    orderBy?: MensagemPixOrderByWithRelationInput | MensagemPixOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MensagemPixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MensagemPixes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MensagemPixes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MensagemPixes
    **/
    _count?: true | MensagemPixCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MensagemPixAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MensagemPixSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MensagemPixMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MensagemPixMaxAggregateInputType
  }

  export type GetMensagemPixAggregateType<T extends MensagemPixAggregateArgs> = {
        [P in keyof T & keyof AggregateMensagemPix]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMensagemPix[P]>
      : GetScalarType<T[P], AggregateMensagemPix[P]>
  }




  export type MensagemPixGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MensagemPixWhereInput
    orderBy?: MensagemPixOrderByWithAggregationInput | MensagemPixOrderByWithAggregationInput[]
    by: MensagemPixScalarFieldEnum[] | MensagemPixScalarFieldEnum
    having?: MensagemPixScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MensagemPixCountAggregateInputType | true
    _avg?: MensagemPixAvgAggregateInputType
    _sum?: MensagemPixSumAggregateInputType
    _min?: MensagemPixMinAggregateInputType
    _max?: MensagemPixMaxAggregateInputType
  }

  export type MensagemPixGroupByOutputType = {
    id: string
    endToEndId: string
    valor: number
    pagadorNome: string
    pagadorCpfCnpj: string
    pagadorIspb: string
    pagadorAgencia: string
    pagadorConta: string
    pagadorTipoConta: string
    recebedorNome: string
    recebedorCpfCnpj: string
    recebedorIspb: string
    recebedorAgencia: string
    recebedorConta: string
    recebedorTipoConta: string
    campoLivre: string | null
    txId: string
    dataHoraPagamento: Date
    pixStreamId: string | null
    _count: MensagemPixCountAggregateOutputType | null
    _avg: MensagemPixAvgAggregateOutputType | null
    _sum: MensagemPixSumAggregateOutputType | null
    _min: MensagemPixMinAggregateOutputType | null
    _max: MensagemPixMaxAggregateOutputType | null
  }

  type GetMensagemPixGroupByPayload<T extends MensagemPixGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MensagemPixGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MensagemPixGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MensagemPixGroupByOutputType[P]>
            : GetScalarType<T[P], MensagemPixGroupByOutputType[P]>
        }
      >
    >


  export type MensagemPixSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    endToEndId?: boolean
    valor?: boolean
    pagadorNome?: boolean
    pagadorCpfCnpj?: boolean
    pagadorIspb?: boolean
    pagadorAgencia?: boolean
    pagadorConta?: boolean
    pagadorTipoConta?: boolean
    recebedorNome?: boolean
    recebedorCpfCnpj?: boolean
    recebedorIspb?: boolean
    recebedorAgencia?: boolean
    recebedorConta?: boolean
    recebedorTipoConta?: boolean
    campoLivre?: boolean
    txId?: boolean
    dataHoraPagamento?: boolean
    pixStreamId?: boolean
    pixStream?: boolean | MensagemPix$pixStreamArgs<ExtArgs>
  }, ExtArgs["result"]["mensagemPix"]>

  export type MensagemPixSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    endToEndId?: boolean
    valor?: boolean
    pagadorNome?: boolean
    pagadorCpfCnpj?: boolean
    pagadorIspb?: boolean
    pagadorAgencia?: boolean
    pagadorConta?: boolean
    pagadorTipoConta?: boolean
    recebedorNome?: boolean
    recebedorCpfCnpj?: boolean
    recebedorIspb?: boolean
    recebedorAgencia?: boolean
    recebedorConta?: boolean
    recebedorTipoConta?: boolean
    campoLivre?: boolean
    txId?: boolean
    dataHoraPagamento?: boolean
    pixStreamId?: boolean
    pixStream?: boolean | MensagemPix$pixStreamArgs<ExtArgs>
  }, ExtArgs["result"]["mensagemPix"]>

  export type MensagemPixSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    endToEndId?: boolean
    valor?: boolean
    pagadorNome?: boolean
    pagadorCpfCnpj?: boolean
    pagadorIspb?: boolean
    pagadorAgencia?: boolean
    pagadorConta?: boolean
    pagadorTipoConta?: boolean
    recebedorNome?: boolean
    recebedorCpfCnpj?: boolean
    recebedorIspb?: boolean
    recebedorAgencia?: boolean
    recebedorConta?: boolean
    recebedorTipoConta?: boolean
    campoLivre?: boolean
    txId?: boolean
    dataHoraPagamento?: boolean
    pixStreamId?: boolean
    pixStream?: boolean | MensagemPix$pixStreamArgs<ExtArgs>
  }, ExtArgs["result"]["mensagemPix"]>

  export type MensagemPixSelectScalar = {
    id?: boolean
    endToEndId?: boolean
    valor?: boolean
    pagadorNome?: boolean
    pagadorCpfCnpj?: boolean
    pagadorIspb?: boolean
    pagadorAgencia?: boolean
    pagadorConta?: boolean
    pagadorTipoConta?: boolean
    recebedorNome?: boolean
    recebedorCpfCnpj?: boolean
    recebedorIspb?: boolean
    recebedorAgencia?: boolean
    recebedorConta?: boolean
    recebedorTipoConta?: boolean
    campoLivre?: boolean
    txId?: boolean
    dataHoraPagamento?: boolean
    pixStreamId?: boolean
  }

  export type MensagemPixOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "endToEndId" | "valor" | "pagadorNome" | "pagadorCpfCnpj" | "pagadorIspb" | "pagadorAgencia" | "pagadorConta" | "pagadorTipoConta" | "recebedorNome" | "recebedorCpfCnpj" | "recebedorIspb" | "recebedorAgencia" | "recebedorConta" | "recebedorTipoConta" | "campoLivre" | "txId" | "dataHoraPagamento" | "pixStreamId", ExtArgs["result"]["mensagemPix"]>
  export type MensagemPixInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pixStream?: boolean | MensagemPix$pixStreamArgs<ExtArgs>
  }
  export type MensagemPixIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pixStream?: boolean | MensagemPix$pixStreamArgs<ExtArgs>
  }
  export type MensagemPixIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pixStream?: boolean | MensagemPix$pixStreamArgs<ExtArgs>
  }

  export type $MensagemPixPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MensagemPix"
    objects: {
      pixStream: Prisma.$PixStreamPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      endToEndId: string
      valor: number
      pagadorNome: string
      pagadorCpfCnpj: string
      pagadorIspb: string
      pagadorAgencia: string
      pagadorConta: string
      pagadorTipoConta: string
      recebedorNome: string
      recebedorCpfCnpj: string
      recebedorIspb: string
      recebedorAgencia: string
      recebedorConta: string
      recebedorTipoConta: string
      campoLivre: string | null
      txId: string
      dataHoraPagamento: Date
      pixStreamId: string | null
    }, ExtArgs["result"]["mensagemPix"]>
    composites: {}
  }

  type MensagemPixGetPayload<S extends boolean | null | undefined | MensagemPixDefaultArgs> = $Result.GetResult<Prisma.$MensagemPixPayload, S>

  type MensagemPixCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MensagemPixFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MensagemPixCountAggregateInputType | true
    }

  export interface MensagemPixDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MensagemPix'], meta: { name: 'MensagemPix' } }
    /**
     * Find zero or one MensagemPix that matches the filter.
     * @param {MensagemPixFindUniqueArgs} args - Arguments to find a MensagemPix
     * @example
     * // Get one MensagemPix
     * const mensagemPix = await prisma.mensagemPix.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MensagemPixFindUniqueArgs>(args: SelectSubset<T, MensagemPixFindUniqueArgs<ExtArgs>>): Prisma__MensagemPixClient<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MensagemPix that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MensagemPixFindUniqueOrThrowArgs} args - Arguments to find a MensagemPix
     * @example
     * // Get one MensagemPix
     * const mensagemPix = await prisma.mensagemPix.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MensagemPixFindUniqueOrThrowArgs>(args: SelectSubset<T, MensagemPixFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MensagemPixClient<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MensagemPix that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemPixFindFirstArgs} args - Arguments to find a MensagemPix
     * @example
     * // Get one MensagemPix
     * const mensagemPix = await prisma.mensagemPix.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MensagemPixFindFirstArgs>(args?: SelectSubset<T, MensagemPixFindFirstArgs<ExtArgs>>): Prisma__MensagemPixClient<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MensagemPix that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemPixFindFirstOrThrowArgs} args - Arguments to find a MensagemPix
     * @example
     * // Get one MensagemPix
     * const mensagemPix = await prisma.mensagemPix.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MensagemPixFindFirstOrThrowArgs>(args?: SelectSubset<T, MensagemPixFindFirstOrThrowArgs<ExtArgs>>): Prisma__MensagemPixClient<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MensagemPixes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemPixFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MensagemPixes
     * const mensagemPixes = await prisma.mensagemPix.findMany()
     * 
     * // Get first 10 MensagemPixes
     * const mensagemPixes = await prisma.mensagemPix.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mensagemPixWithIdOnly = await prisma.mensagemPix.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MensagemPixFindManyArgs>(args?: SelectSubset<T, MensagemPixFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MensagemPix.
     * @param {MensagemPixCreateArgs} args - Arguments to create a MensagemPix.
     * @example
     * // Create one MensagemPix
     * const MensagemPix = await prisma.mensagemPix.create({
     *   data: {
     *     // ... data to create a MensagemPix
     *   }
     * })
     * 
     */
    create<T extends MensagemPixCreateArgs>(args: SelectSubset<T, MensagemPixCreateArgs<ExtArgs>>): Prisma__MensagemPixClient<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MensagemPixes.
     * @param {MensagemPixCreateManyArgs} args - Arguments to create many MensagemPixes.
     * @example
     * // Create many MensagemPixes
     * const mensagemPix = await prisma.mensagemPix.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MensagemPixCreateManyArgs>(args?: SelectSubset<T, MensagemPixCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MensagemPixes and returns the data saved in the database.
     * @param {MensagemPixCreateManyAndReturnArgs} args - Arguments to create many MensagemPixes.
     * @example
     * // Create many MensagemPixes
     * const mensagemPix = await prisma.mensagemPix.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MensagemPixes and only return the `id`
     * const mensagemPixWithIdOnly = await prisma.mensagemPix.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MensagemPixCreateManyAndReturnArgs>(args?: SelectSubset<T, MensagemPixCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MensagemPix.
     * @param {MensagemPixDeleteArgs} args - Arguments to delete one MensagemPix.
     * @example
     * // Delete one MensagemPix
     * const MensagemPix = await prisma.mensagemPix.delete({
     *   where: {
     *     // ... filter to delete one MensagemPix
     *   }
     * })
     * 
     */
    delete<T extends MensagemPixDeleteArgs>(args: SelectSubset<T, MensagemPixDeleteArgs<ExtArgs>>): Prisma__MensagemPixClient<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MensagemPix.
     * @param {MensagemPixUpdateArgs} args - Arguments to update one MensagemPix.
     * @example
     * // Update one MensagemPix
     * const mensagemPix = await prisma.mensagemPix.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MensagemPixUpdateArgs>(args: SelectSubset<T, MensagemPixUpdateArgs<ExtArgs>>): Prisma__MensagemPixClient<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MensagemPixes.
     * @param {MensagemPixDeleteManyArgs} args - Arguments to filter MensagemPixes to delete.
     * @example
     * // Delete a few MensagemPixes
     * const { count } = await prisma.mensagemPix.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MensagemPixDeleteManyArgs>(args?: SelectSubset<T, MensagemPixDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MensagemPixes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemPixUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MensagemPixes
     * const mensagemPix = await prisma.mensagemPix.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MensagemPixUpdateManyArgs>(args: SelectSubset<T, MensagemPixUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MensagemPixes and returns the data updated in the database.
     * @param {MensagemPixUpdateManyAndReturnArgs} args - Arguments to update many MensagemPixes.
     * @example
     * // Update many MensagemPixes
     * const mensagemPix = await prisma.mensagemPix.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MensagemPixes and only return the `id`
     * const mensagemPixWithIdOnly = await prisma.mensagemPix.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MensagemPixUpdateManyAndReturnArgs>(args: SelectSubset<T, MensagemPixUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MensagemPix.
     * @param {MensagemPixUpsertArgs} args - Arguments to update or create a MensagemPix.
     * @example
     * // Update or create a MensagemPix
     * const mensagemPix = await prisma.mensagemPix.upsert({
     *   create: {
     *     // ... data to create a MensagemPix
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MensagemPix we want to update
     *   }
     * })
     */
    upsert<T extends MensagemPixUpsertArgs>(args: SelectSubset<T, MensagemPixUpsertArgs<ExtArgs>>): Prisma__MensagemPixClient<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MensagemPixes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemPixCountArgs} args - Arguments to filter MensagemPixes to count.
     * @example
     * // Count the number of MensagemPixes
     * const count = await prisma.mensagemPix.count({
     *   where: {
     *     // ... the filter for the MensagemPixes we want to count
     *   }
     * })
    **/
    count<T extends MensagemPixCountArgs>(
      args?: Subset<T, MensagemPixCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MensagemPixCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MensagemPix.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemPixAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MensagemPixAggregateArgs>(args: Subset<T, MensagemPixAggregateArgs>): Prisma.PrismaPromise<GetMensagemPixAggregateType<T>>

    /**
     * Group by MensagemPix.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MensagemPixGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MensagemPixGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MensagemPixGroupByArgs['orderBy'] }
        : { orderBy?: MensagemPixGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MensagemPixGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMensagemPixGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MensagemPix model
   */
  readonly fields: MensagemPixFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MensagemPix.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MensagemPixClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pixStream<T extends MensagemPix$pixStreamArgs<ExtArgs> = {}>(args?: Subset<T, MensagemPix$pixStreamArgs<ExtArgs>>): Prisma__PixStreamClient<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MensagemPix model
   */
  interface MensagemPixFieldRefs {
    readonly id: FieldRef<"MensagemPix", 'String'>
    readonly endToEndId: FieldRef<"MensagemPix", 'String'>
    readonly valor: FieldRef<"MensagemPix", 'Float'>
    readonly pagadorNome: FieldRef<"MensagemPix", 'String'>
    readonly pagadorCpfCnpj: FieldRef<"MensagemPix", 'String'>
    readonly pagadorIspb: FieldRef<"MensagemPix", 'String'>
    readonly pagadorAgencia: FieldRef<"MensagemPix", 'String'>
    readonly pagadorConta: FieldRef<"MensagemPix", 'String'>
    readonly pagadorTipoConta: FieldRef<"MensagemPix", 'String'>
    readonly recebedorNome: FieldRef<"MensagemPix", 'String'>
    readonly recebedorCpfCnpj: FieldRef<"MensagemPix", 'String'>
    readonly recebedorIspb: FieldRef<"MensagemPix", 'String'>
    readonly recebedorAgencia: FieldRef<"MensagemPix", 'String'>
    readonly recebedorConta: FieldRef<"MensagemPix", 'String'>
    readonly recebedorTipoConta: FieldRef<"MensagemPix", 'String'>
    readonly campoLivre: FieldRef<"MensagemPix", 'String'>
    readonly txId: FieldRef<"MensagemPix", 'String'>
    readonly dataHoraPagamento: FieldRef<"MensagemPix", 'DateTime'>
    readonly pixStreamId: FieldRef<"MensagemPix", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MensagemPix findUnique
   */
  export type MensagemPixFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
    /**
     * Filter, which MensagemPix to fetch.
     */
    where: MensagemPixWhereUniqueInput
  }

  /**
   * MensagemPix findUniqueOrThrow
   */
  export type MensagemPixFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
    /**
     * Filter, which MensagemPix to fetch.
     */
    where: MensagemPixWhereUniqueInput
  }

  /**
   * MensagemPix findFirst
   */
  export type MensagemPixFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
    /**
     * Filter, which MensagemPix to fetch.
     */
    where?: MensagemPixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MensagemPixes to fetch.
     */
    orderBy?: MensagemPixOrderByWithRelationInput | MensagemPixOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MensagemPixes.
     */
    cursor?: MensagemPixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MensagemPixes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MensagemPixes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MensagemPixes.
     */
    distinct?: MensagemPixScalarFieldEnum | MensagemPixScalarFieldEnum[]
  }

  /**
   * MensagemPix findFirstOrThrow
   */
  export type MensagemPixFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
    /**
     * Filter, which MensagemPix to fetch.
     */
    where?: MensagemPixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MensagemPixes to fetch.
     */
    orderBy?: MensagemPixOrderByWithRelationInput | MensagemPixOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MensagemPixes.
     */
    cursor?: MensagemPixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MensagemPixes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MensagemPixes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MensagemPixes.
     */
    distinct?: MensagemPixScalarFieldEnum | MensagemPixScalarFieldEnum[]
  }

  /**
   * MensagemPix findMany
   */
  export type MensagemPixFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
    /**
     * Filter, which MensagemPixes to fetch.
     */
    where?: MensagemPixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MensagemPixes to fetch.
     */
    orderBy?: MensagemPixOrderByWithRelationInput | MensagemPixOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MensagemPixes.
     */
    cursor?: MensagemPixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MensagemPixes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MensagemPixes.
     */
    skip?: number
    distinct?: MensagemPixScalarFieldEnum | MensagemPixScalarFieldEnum[]
  }

  /**
   * MensagemPix create
   */
  export type MensagemPixCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
    /**
     * The data needed to create a MensagemPix.
     */
    data: XOR<MensagemPixCreateInput, MensagemPixUncheckedCreateInput>
  }

  /**
   * MensagemPix createMany
   */
  export type MensagemPixCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MensagemPixes.
     */
    data: MensagemPixCreateManyInput | MensagemPixCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MensagemPix createManyAndReturn
   */
  export type MensagemPixCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * The data used to create many MensagemPixes.
     */
    data: MensagemPixCreateManyInput | MensagemPixCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MensagemPix update
   */
  export type MensagemPixUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
    /**
     * The data needed to update a MensagemPix.
     */
    data: XOR<MensagemPixUpdateInput, MensagemPixUncheckedUpdateInput>
    /**
     * Choose, which MensagemPix to update.
     */
    where: MensagemPixWhereUniqueInput
  }

  /**
   * MensagemPix updateMany
   */
  export type MensagemPixUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MensagemPixes.
     */
    data: XOR<MensagemPixUpdateManyMutationInput, MensagemPixUncheckedUpdateManyInput>
    /**
     * Filter which MensagemPixes to update
     */
    where?: MensagemPixWhereInput
    /**
     * Limit how many MensagemPixes to update.
     */
    limit?: number
  }

  /**
   * MensagemPix updateManyAndReturn
   */
  export type MensagemPixUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * The data used to update MensagemPixes.
     */
    data: XOR<MensagemPixUpdateManyMutationInput, MensagemPixUncheckedUpdateManyInput>
    /**
     * Filter which MensagemPixes to update
     */
    where?: MensagemPixWhereInput
    /**
     * Limit how many MensagemPixes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * MensagemPix upsert
   */
  export type MensagemPixUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
    /**
     * The filter to search for the MensagemPix to update in case it exists.
     */
    where: MensagemPixWhereUniqueInput
    /**
     * In case the MensagemPix found by the `where` argument doesn't exist, create a new MensagemPix with this data.
     */
    create: XOR<MensagemPixCreateInput, MensagemPixUncheckedCreateInput>
    /**
     * In case the MensagemPix was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MensagemPixUpdateInput, MensagemPixUncheckedUpdateInput>
  }

  /**
   * MensagemPix delete
   */
  export type MensagemPixDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
    /**
     * Filter which MensagemPix to delete.
     */
    where: MensagemPixWhereUniqueInput
  }

  /**
   * MensagemPix deleteMany
   */
  export type MensagemPixDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MensagemPixes to delete
     */
    where?: MensagemPixWhereInput
    /**
     * Limit how many MensagemPixes to delete.
     */
    limit?: number
  }

  /**
   * MensagemPix.pixStream
   */
  export type MensagemPix$pixStreamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
    where?: PixStreamWhereInput
  }

  /**
   * MensagemPix without action
   */
  export type MensagemPixDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
  }


  /**
   * Model PixStream
   */

  export type AggregatePixStream = {
    _count: PixStreamCountAggregateOutputType | null
    _min: PixStreamMinAggregateOutputType | null
    _max: PixStreamMaxAggregateOutputType | null
  }

  export type PixStreamMinAggregateOutputType = {
    id: string | null
    interactionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PixStreamMaxAggregateOutputType = {
    id: string | null
    interactionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PixStreamCountAggregateOutputType = {
    id: number
    interactionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PixStreamMinAggregateInputType = {
    id?: true
    interactionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PixStreamMaxAggregateInputType = {
    id?: true
    interactionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PixStreamCountAggregateInputType = {
    id?: true
    interactionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PixStreamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PixStream to aggregate.
     */
    where?: PixStreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PixStreams to fetch.
     */
    orderBy?: PixStreamOrderByWithRelationInput | PixStreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PixStreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PixStreams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PixStreams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PixStreams
    **/
    _count?: true | PixStreamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PixStreamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PixStreamMaxAggregateInputType
  }

  export type GetPixStreamAggregateType<T extends PixStreamAggregateArgs> = {
        [P in keyof T & keyof AggregatePixStream]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePixStream[P]>
      : GetScalarType<T[P], AggregatePixStream[P]>
  }




  export type PixStreamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PixStreamWhereInput
    orderBy?: PixStreamOrderByWithAggregationInput | PixStreamOrderByWithAggregationInput[]
    by: PixStreamScalarFieldEnum[] | PixStreamScalarFieldEnum
    having?: PixStreamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PixStreamCountAggregateInputType | true
    _min?: PixStreamMinAggregateInputType
    _max?: PixStreamMaxAggregateInputType
  }

  export type PixStreamGroupByOutputType = {
    id: string
    interactionId: string
    createdAt: Date
    updatedAt: Date
    _count: PixStreamCountAggregateOutputType | null
    _min: PixStreamMinAggregateOutputType | null
    _max: PixStreamMaxAggregateOutputType | null
  }

  type GetPixStreamGroupByPayload<T extends PixStreamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PixStreamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PixStreamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PixStreamGroupByOutputType[P]>
            : GetScalarType<T[P], PixStreamGroupByOutputType[P]>
        }
      >
    >


  export type PixStreamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    interactionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    mensagens?: boolean | PixStream$mensagensArgs<ExtArgs>
    _count?: boolean | PixStreamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pixStream"]>

  export type PixStreamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    interactionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pixStream"]>

  export type PixStreamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    interactionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pixStream"]>

  export type PixStreamSelectScalar = {
    id?: boolean
    interactionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PixStreamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "interactionId" | "createdAt" | "updatedAt", ExtArgs["result"]["pixStream"]>
  export type PixStreamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mensagens?: boolean | PixStream$mensagensArgs<ExtArgs>
    _count?: boolean | PixStreamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PixStreamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PixStreamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PixStreamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PixStream"
    objects: {
      mensagens: Prisma.$MensagemPixPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      interactionId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pixStream"]>
    composites: {}
  }

  type PixStreamGetPayload<S extends boolean | null | undefined | PixStreamDefaultArgs> = $Result.GetResult<Prisma.$PixStreamPayload, S>

  type PixStreamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PixStreamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PixStreamCountAggregateInputType | true
    }

  export interface PixStreamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PixStream'], meta: { name: 'PixStream' } }
    /**
     * Find zero or one PixStream that matches the filter.
     * @param {PixStreamFindUniqueArgs} args - Arguments to find a PixStream
     * @example
     * // Get one PixStream
     * const pixStream = await prisma.pixStream.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PixStreamFindUniqueArgs>(args: SelectSubset<T, PixStreamFindUniqueArgs<ExtArgs>>): Prisma__PixStreamClient<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PixStream that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PixStreamFindUniqueOrThrowArgs} args - Arguments to find a PixStream
     * @example
     * // Get one PixStream
     * const pixStream = await prisma.pixStream.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PixStreamFindUniqueOrThrowArgs>(args: SelectSubset<T, PixStreamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PixStreamClient<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PixStream that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PixStreamFindFirstArgs} args - Arguments to find a PixStream
     * @example
     * // Get one PixStream
     * const pixStream = await prisma.pixStream.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PixStreamFindFirstArgs>(args?: SelectSubset<T, PixStreamFindFirstArgs<ExtArgs>>): Prisma__PixStreamClient<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PixStream that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PixStreamFindFirstOrThrowArgs} args - Arguments to find a PixStream
     * @example
     * // Get one PixStream
     * const pixStream = await prisma.pixStream.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PixStreamFindFirstOrThrowArgs>(args?: SelectSubset<T, PixStreamFindFirstOrThrowArgs<ExtArgs>>): Prisma__PixStreamClient<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PixStreams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PixStreamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PixStreams
     * const pixStreams = await prisma.pixStream.findMany()
     * 
     * // Get first 10 PixStreams
     * const pixStreams = await prisma.pixStream.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pixStreamWithIdOnly = await prisma.pixStream.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PixStreamFindManyArgs>(args?: SelectSubset<T, PixStreamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PixStream.
     * @param {PixStreamCreateArgs} args - Arguments to create a PixStream.
     * @example
     * // Create one PixStream
     * const PixStream = await prisma.pixStream.create({
     *   data: {
     *     // ... data to create a PixStream
     *   }
     * })
     * 
     */
    create<T extends PixStreamCreateArgs>(args: SelectSubset<T, PixStreamCreateArgs<ExtArgs>>): Prisma__PixStreamClient<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PixStreams.
     * @param {PixStreamCreateManyArgs} args - Arguments to create many PixStreams.
     * @example
     * // Create many PixStreams
     * const pixStream = await prisma.pixStream.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PixStreamCreateManyArgs>(args?: SelectSubset<T, PixStreamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PixStreams and returns the data saved in the database.
     * @param {PixStreamCreateManyAndReturnArgs} args - Arguments to create many PixStreams.
     * @example
     * // Create many PixStreams
     * const pixStream = await prisma.pixStream.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PixStreams and only return the `id`
     * const pixStreamWithIdOnly = await prisma.pixStream.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PixStreamCreateManyAndReturnArgs>(args?: SelectSubset<T, PixStreamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PixStream.
     * @param {PixStreamDeleteArgs} args - Arguments to delete one PixStream.
     * @example
     * // Delete one PixStream
     * const PixStream = await prisma.pixStream.delete({
     *   where: {
     *     // ... filter to delete one PixStream
     *   }
     * })
     * 
     */
    delete<T extends PixStreamDeleteArgs>(args: SelectSubset<T, PixStreamDeleteArgs<ExtArgs>>): Prisma__PixStreamClient<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PixStream.
     * @param {PixStreamUpdateArgs} args - Arguments to update one PixStream.
     * @example
     * // Update one PixStream
     * const pixStream = await prisma.pixStream.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PixStreamUpdateArgs>(args: SelectSubset<T, PixStreamUpdateArgs<ExtArgs>>): Prisma__PixStreamClient<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PixStreams.
     * @param {PixStreamDeleteManyArgs} args - Arguments to filter PixStreams to delete.
     * @example
     * // Delete a few PixStreams
     * const { count } = await prisma.pixStream.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PixStreamDeleteManyArgs>(args?: SelectSubset<T, PixStreamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PixStreams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PixStreamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PixStreams
     * const pixStream = await prisma.pixStream.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PixStreamUpdateManyArgs>(args: SelectSubset<T, PixStreamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PixStreams and returns the data updated in the database.
     * @param {PixStreamUpdateManyAndReturnArgs} args - Arguments to update many PixStreams.
     * @example
     * // Update many PixStreams
     * const pixStream = await prisma.pixStream.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PixStreams and only return the `id`
     * const pixStreamWithIdOnly = await prisma.pixStream.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PixStreamUpdateManyAndReturnArgs>(args: SelectSubset<T, PixStreamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PixStream.
     * @param {PixStreamUpsertArgs} args - Arguments to update or create a PixStream.
     * @example
     * // Update or create a PixStream
     * const pixStream = await prisma.pixStream.upsert({
     *   create: {
     *     // ... data to create a PixStream
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PixStream we want to update
     *   }
     * })
     */
    upsert<T extends PixStreamUpsertArgs>(args: SelectSubset<T, PixStreamUpsertArgs<ExtArgs>>): Prisma__PixStreamClient<$Result.GetResult<Prisma.$PixStreamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PixStreams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PixStreamCountArgs} args - Arguments to filter PixStreams to count.
     * @example
     * // Count the number of PixStreams
     * const count = await prisma.pixStream.count({
     *   where: {
     *     // ... the filter for the PixStreams we want to count
     *   }
     * })
    **/
    count<T extends PixStreamCountArgs>(
      args?: Subset<T, PixStreamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PixStreamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PixStream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PixStreamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PixStreamAggregateArgs>(args: Subset<T, PixStreamAggregateArgs>): Prisma.PrismaPromise<GetPixStreamAggregateType<T>>

    /**
     * Group by PixStream.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PixStreamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PixStreamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PixStreamGroupByArgs['orderBy'] }
        : { orderBy?: PixStreamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PixStreamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPixStreamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PixStream model
   */
  readonly fields: PixStreamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PixStream.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PixStreamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mensagens<T extends PixStream$mensagensArgs<ExtArgs> = {}>(args?: Subset<T, PixStream$mensagensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MensagemPixPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PixStream model
   */
  interface PixStreamFieldRefs {
    readonly id: FieldRef<"PixStream", 'String'>
    readonly interactionId: FieldRef<"PixStream", 'String'>
    readonly createdAt: FieldRef<"PixStream", 'DateTime'>
    readonly updatedAt: FieldRef<"PixStream", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PixStream findUnique
   */
  export type PixStreamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
    /**
     * Filter, which PixStream to fetch.
     */
    where: PixStreamWhereUniqueInput
  }

  /**
   * PixStream findUniqueOrThrow
   */
  export type PixStreamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
    /**
     * Filter, which PixStream to fetch.
     */
    where: PixStreamWhereUniqueInput
  }

  /**
   * PixStream findFirst
   */
  export type PixStreamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
    /**
     * Filter, which PixStream to fetch.
     */
    where?: PixStreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PixStreams to fetch.
     */
    orderBy?: PixStreamOrderByWithRelationInput | PixStreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PixStreams.
     */
    cursor?: PixStreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PixStreams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PixStreams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PixStreams.
     */
    distinct?: PixStreamScalarFieldEnum | PixStreamScalarFieldEnum[]
  }

  /**
   * PixStream findFirstOrThrow
   */
  export type PixStreamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
    /**
     * Filter, which PixStream to fetch.
     */
    where?: PixStreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PixStreams to fetch.
     */
    orderBy?: PixStreamOrderByWithRelationInput | PixStreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PixStreams.
     */
    cursor?: PixStreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PixStreams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PixStreams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PixStreams.
     */
    distinct?: PixStreamScalarFieldEnum | PixStreamScalarFieldEnum[]
  }

  /**
   * PixStream findMany
   */
  export type PixStreamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
    /**
     * Filter, which PixStreams to fetch.
     */
    where?: PixStreamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PixStreams to fetch.
     */
    orderBy?: PixStreamOrderByWithRelationInput | PixStreamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PixStreams.
     */
    cursor?: PixStreamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PixStreams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PixStreams.
     */
    skip?: number
    distinct?: PixStreamScalarFieldEnum | PixStreamScalarFieldEnum[]
  }

  /**
   * PixStream create
   */
  export type PixStreamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
    /**
     * The data needed to create a PixStream.
     */
    data: XOR<PixStreamCreateInput, PixStreamUncheckedCreateInput>
  }

  /**
   * PixStream createMany
   */
  export type PixStreamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PixStreams.
     */
    data: PixStreamCreateManyInput | PixStreamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PixStream createManyAndReturn
   */
  export type PixStreamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * The data used to create many PixStreams.
     */
    data: PixStreamCreateManyInput | PixStreamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PixStream update
   */
  export type PixStreamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
    /**
     * The data needed to update a PixStream.
     */
    data: XOR<PixStreamUpdateInput, PixStreamUncheckedUpdateInput>
    /**
     * Choose, which PixStream to update.
     */
    where: PixStreamWhereUniqueInput
  }

  /**
   * PixStream updateMany
   */
  export type PixStreamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PixStreams.
     */
    data: XOR<PixStreamUpdateManyMutationInput, PixStreamUncheckedUpdateManyInput>
    /**
     * Filter which PixStreams to update
     */
    where?: PixStreamWhereInput
    /**
     * Limit how many PixStreams to update.
     */
    limit?: number
  }

  /**
   * PixStream updateManyAndReturn
   */
  export type PixStreamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * The data used to update PixStreams.
     */
    data: XOR<PixStreamUpdateManyMutationInput, PixStreamUncheckedUpdateManyInput>
    /**
     * Filter which PixStreams to update
     */
    where?: PixStreamWhereInput
    /**
     * Limit how many PixStreams to update.
     */
    limit?: number
  }

  /**
   * PixStream upsert
   */
  export type PixStreamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
    /**
     * The filter to search for the PixStream to update in case it exists.
     */
    where: PixStreamWhereUniqueInput
    /**
     * In case the PixStream found by the `where` argument doesn't exist, create a new PixStream with this data.
     */
    create: XOR<PixStreamCreateInput, PixStreamUncheckedCreateInput>
    /**
     * In case the PixStream was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PixStreamUpdateInput, PixStreamUncheckedUpdateInput>
  }

  /**
   * PixStream delete
   */
  export type PixStreamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
    /**
     * Filter which PixStream to delete.
     */
    where: PixStreamWhereUniqueInput
  }

  /**
   * PixStream deleteMany
   */
  export type PixStreamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PixStreams to delete
     */
    where?: PixStreamWhereInput
    /**
     * Limit how many PixStreams to delete.
     */
    limit?: number
  }

  /**
   * PixStream.mensagens
   */
  export type PixStream$mensagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MensagemPix
     */
    select?: MensagemPixSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MensagemPix
     */
    omit?: MensagemPixOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MensagemPixInclude<ExtArgs> | null
    where?: MensagemPixWhereInput
    orderBy?: MensagemPixOrderByWithRelationInput | MensagemPixOrderByWithRelationInput[]
    cursor?: MensagemPixWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MensagemPixScalarFieldEnum | MensagemPixScalarFieldEnum[]
  }

  /**
   * PixStream without action
   */
  export type PixStreamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PixStream
     */
    select?: PixStreamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PixStream
     */
    omit?: PixStreamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PixStreamInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const MensagemPixScalarFieldEnum: {
    id: 'id',
    endToEndId: 'endToEndId',
    valor: 'valor',
    pagadorNome: 'pagadorNome',
    pagadorCpfCnpj: 'pagadorCpfCnpj',
    pagadorIspb: 'pagadorIspb',
    pagadorAgencia: 'pagadorAgencia',
    pagadorConta: 'pagadorConta',
    pagadorTipoConta: 'pagadorTipoConta',
    recebedorNome: 'recebedorNome',
    recebedorCpfCnpj: 'recebedorCpfCnpj',
    recebedorIspb: 'recebedorIspb',
    recebedorAgencia: 'recebedorAgencia',
    recebedorConta: 'recebedorConta',
    recebedorTipoConta: 'recebedorTipoConta',
    campoLivre: 'campoLivre',
    txId: 'txId',
    dataHoraPagamento: 'dataHoraPagamento',
    pixStreamId: 'pixStreamId'
  };

  export type MensagemPixScalarFieldEnum = (typeof MensagemPixScalarFieldEnum)[keyof typeof MensagemPixScalarFieldEnum]


  export const PixStreamScalarFieldEnum: {
    id: 'id',
    interactionId: 'interactionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PixStreamScalarFieldEnum = (typeof PixStreamScalarFieldEnum)[keyof typeof PixStreamScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type MensagemPixWhereInput = {
    AND?: MensagemPixWhereInput | MensagemPixWhereInput[]
    OR?: MensagemPixWhereInput[]
    NOT?: MensagemPixWhereInput | MensagemPixWhereInput[]
    id?: StringFilter<"MensagemPix"> | string
    endToEndId?: StringFilter<"MensagemPix"> | string
    valor?: FloatFilter<"MensagemPix"> | number
    pagadorNome?: StringFilter<"MensagemPix"> | string
    pagadorCpfCnpj?: StringFilter<"MensagemPix"> | string
    pagadorIspb?: StringFilter<"MensagemPix"> | string
    pagadorAgencia?: StringFilter<"MensagemPix"> | string
    pagadorConta?: StringFilter<"MensagemPix"> | string
    pagadorTipoConta?: StringFilter<"MensagemPix"> | string
    recebedorNome?: StringFilter<"MensagemPix"> | string
    recebedorCpfCnpj?: StringFilter<"MensagemPix"> | string
    recebedorIspb?: StringFilter<"MensagemPix"> | string
    recebedorAgencia?: StringFilter<"MensagemPix"> | string
    recebedorConta?: StringFilter<"MensagemPix"> | string
    recebedorTipoConta?: StringFilter<"MensagemPix"> | string
    campoLivre?: StringNullableFilter<"MensagemPix"> | string | null
    txId?: StringFilter<"MensagemPix"> | string
    dataHoraPagamento?: DateTimeFilter<"MensagemPix"> | Date | string
    pixStreamId?: StringNullableFilter<"MensagemPix"> | string | null
    pixStream?: XOR<PixStreamNullableScalarRelationFilter, PixStreamWhereInput> | null
  }

  export type MensagemPixOrderByWithRelationInput = {
    id?: SortOrder
    endToEndId?: SortOrder
    valor?: SortOrder
    pagadorNome?: SortOrder
    pagadorCpfCnpj?: SortOrder
    pagadorIspb?: SortOrder
    pagadorAgencia?: SortOrder
    pagadorConta?: SortOrder
    pagadorTipoConta?: SortOrder
    recebedorNome?: SortOrder
    recebedorCpfCnpj?: SortOrder
    recebedorIspb?: SortOrder
    recebedorAgencia?: SortOrder
    recebedorConta?: SortOrder
    recebedorTipoConta?: SortOrder
    campoLivre?: SortOrderInput | SortOrder
    txId?: SortOrder
    dataHoraPagamento?: SortOrder
    pixStreamId?: SortOrderInput | SortOrder
    pixStream?: PixStreamOrderByWithRelationInput
  }

  export type MensagemPixWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MensagemPixWhereInput | MensagemPixWhereInput[]
    OR?: MensagemPixWhereInput[]
    NOT?: MensagemPixWhereInput | MensagemPixWhereInput[]
    endToEndId?: StringFilter<"MensagemPix"> | string
    valor?: FloatFilter<"MensagemPix"> | number
    pagadorNome?: StringFilter<"MensagemPix"> | string
    pagadorCpfCnpj?: StringFilter<"MensagemPix"> | string
    pagadorIspb?: StringFilter<"MensagemPix"> | string
    pagadorAgencia?: StringFilter<"MensagemPix"> | string
    pagadorConta?: StringFilter<"MensagemPix"> | string
    pagadorTipoConta?: StringFilter<"MensagemPix"> | string
    recebedorNome?: StringFilter<"MensagemPix"> | string
    recebedorCpfCnpj?: StringFilter<"MensagemPix"> | string
    recebedorIspb?: StringFilter<"MensagemPix"> | string
    recebedorAgencia?: StringFilter<"MensagemPix"> | string
    recebedorConta?: StringFilter<"MensagemPix"> | string
    recebedorTipoConta?: StringFilter<"MensagemPix"> | string
    campoLivre?: StringNullableFilter<"MensagemPix"> | string | null
    txId?: StringFilter<"MensagemPix"> | string
    dataHoraPagamento?: DateTimeFilter<"MensagemPix"> | Date | string
    pixStreamId?: StringNullableFilter<"MensagemPix"> | string | null
    pixStream?: XOR<PixStreamNullableScalarRelationFilter, PixStreamWhereInput> | null
  }, "id">

  export type MensagemPixOrderByWithAggregationInput = {
    id?: SortOrder
    endToEndId?: SortOrder
    valor?: SortOrder
    pagadorNome?: SortOrder
    pagadorCpfCnpj?: SortOrder
    pagadorIspb?: SortOrder
    pagadorAgencia?: SortOrder
    pagadorConta?: SortOrder
    pagadorTipoConta?: SortOrder
    recebedorNome?: SortOrder
    recebedorCpfCnpj?: SortOrder
    recebedorIspb?: SortOrder
    recebedorAgencia?: SortOrder
    recebedorConta?: SortOrder
    recebedorTipoConta?: SortOrder
    campoLivre?: SortOrderInput | SortOrder
    txId?: SortOrder
    dataHoraPagamento?: SortOrder
    pixStreamId?: SortOrderInput | SortOrder
    _count?: MensagemPixCountOrderByAggregateInput
    _avg?: MensagemPixAvgOrderByAggregateInput
    _max?: MensagemPixMaxOrderByAggregateInput
    _min?: MensagemPixMinOrderByAggregateInput
    _sum?: MensagemPixSumOrderByAggregateInput
  }

  export type MensagemPixScalarWhereWithAggregatesInput = {
    AND?: MensagemPixScalarWhereWithAggregatesInput | MensagemPixScalarWhereWithAggregatesInput[]
    OR?: MensagemPixScalarWhereWithAggregatesInput[]
    NOT?: MensagemPixScalarWhereWithAggregatesInput | MensagemPixScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MensagemPix"> | string
    endToEndId?: StringWithAggregatesFilter<"MensagemPix"> | string
    valor?: FloatWithAggregatesFilter<"MensagemPix"> | number
    pagadorNome?: StringWithAggregatesFilter<"MensagemPix"> | string
    pagadorCpfCnpj?: StringWithAggregatesFilter<"MensagemPix"> | string
    pagadorIspb?: StringWithAggregatesFilter<"MensagemPix"> | string
    pagadorAgencia?: StringWithAggregatesFilter<"MensagemPix"> | string
    pagadorConta?: StringWithAggregatesFilter<"MensagemPix"> | string
    pagadorTipoConta?: StringWithAggregatesFilter<"MensagemPix"> | string
    recebedorNome?: StringWithAggregatesFilter<"MensagemPix"> | string
    recebedorCpfCnpj?: StringWithAggregatesFilter<"MensagemPix"> | string
    recebedorIspb?: StringWithAggregatesFilter<"MensagemPix"> | string
    recebedorAgencia?: StringWithAggregatesFilter<"MensagemPix"> | string
    recebedorConta?: StringWithAggregatesFilter<"MensagemPix"> | string
    recebedorTipoConta?: StringWithAggregatesFilter<"MensagemPix"> | string
    campoLivre?: StringNullableWithAggregatesFilter<"MensagemPix"> | string | null
    txId?: StringWithAggregatesFilter<"MensagemPix"> | string
    dataHoraPagamento?: DateTimeWithAggregatesFilter<"MensagemPix"> | Date | string
    pixStreamId?: StringNullableWithAggregatesFilter<"MensagemPix"> | string | null
  }

  export type PixStreamWhereInput = {
    AND?: PixStreamWhereInput | PixStreamWhereInput[]
    OR?: PixStreamWhereInput[]
    NOT?: PixStreamWhereInput | PixStreamWhereInput[]
    id?: StringFilter<"PixStream"> | string
    interactionId?: StringFilter<"PixStream"> | string
    createdAt?: DateTimeFilter<"PixStream"> | Date | string
    updatedAt?: DateTimeFilter<"PixStream"> | Date | string
    mensagens?: MensagemPixListRelationFilter
  }

  export type PixStreamOrderByWithRelationInput = {
    id?: SortOrder
    interactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    mensagens?: MensagemPixOrderByRelationAggregateInput
  }

  export type PixStreamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    interactionId?: string
    AND?: PixStreamWhereInput | PixStreamWhereInput[]
    OR?: PixStreamWhereInput[]
    NOT?: PixStreamWhereInput | PixStreamWhereInput[]
    createdAt?: DateTimeFilter<"PixStream"> | Date | string
    updatedAt?: DateTimeFilter<"PixStream"> | Date | string
    mensagens?: MensagemPixListRelationFilter
  }, "id" | "interactionId">

  export type PixStreamOrderByWithAggregationInput = {
    id?: SortOrder
    interactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PixStreamCountOrderByAggregateInput
    _max?: PixStreamMaxOrderByAggregateInput
    _min?: PixStreamMinOrderByAggregateInput
  }

  export type PixStreamScalarWhereWithAggregatesInput = {
    AND?: PixStreamScalarWhereWithAggregatesInput | PixStreamScalarWhereWithAggregatesInput[]
    OR?: PixStreamScalarWhereWithAggregatesInput[]
    NOT?: PixStreamScalarWhereWithAggregatesInput | PixStreamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PixStream"> | string
    interactionId?: StringWithAggregatesFilter<"PixStream"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PixStream"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PixStream"> | Date | string
  }

  export type MensagemPixCreateInput = {
    id?: string
    endToEndId: string
    valor: number
    pagadorNome: string
    pagadorCpfCnpj: string
    pagadorIspb: string
    pagadorAgencia: string
    pagadorConta: string
    pagadorTipoConta: string
    recebedorNome: string
    recebedorCpfCnpj: string
    recebedorIspb: string
    recebedorAgencia: string
    recebedorConta: string
    recebedorTipoConta: string
    campoLivre?: string | null
    txId: string
    dataHoraPagamento: Date | string
    pixStream?: PixStreamCreateNestedOneWithoutMensagensInput
  }

  export type MensagemPixUncheckedCreateInput = {
    id?: string
    endToEndId: string
    valor: number
    pagadorNome: string
    pagadorCpfCnpj: string
    pagadorIspb: string
    pagadorAgencia: string
    pagadorConta: string
    pagadorTipoConta: string
    recebedorNome: string
    recebedorCpfCnpj: string
    recebedorIspb: string
    recebedorAgencia: string
    recebedorConta: string
    recebedorTipoConta: string
    campoLivre?: string | null
    txId: string
    dataHoraPagamento: Date | string
    pixStreamId?: string | null
  }

  export type MensagemPixUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    endToEndId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    pagadorNome?: StringFieldUpdateOperationsInput | string
    pagadorCpfCnpj?: StringFieldUpdateOperationsInput | string
    pagadorIspb?: StringFieldUpdateOperationsInput | string
    pagadorAgencia?: StringFieldUpdateOperationsInput | string
    pagadorConta?: StringFieldUpdateOperationsInput | string
    pagadorTipoConta?: StringFieldUpdateOperationsInput | string
    recebedorNome?: StringFieldUpdateOperationsInput | string
    recebedorCpfCnpj?: StringFieldUpdateOperationsInput | string
    recebedorIspb?: StringFieldUpdateOperationsInput | string
    recebedorAgencia?: StringFieldUpdateOperationsInput | string
    recebedorConta?: StringFieldUpdateOperationsInput | string
    recebedorTipoConta?: StringFieldUpdateOperationsInput | string
    campoLivre?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: StringFieldUpdateOperationsInput | string
    dataHoraPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
    pixStream?: PixStreamUpdateOneWithoutMensagensNestedInput
  }

  export type MensagemPixUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    endToEndId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    pagadorNome?: StringFieldUpdateOperationsInput | string
    pagadorCpfCnpj?: StringFieldUpdateOperationsInput | string
    pagadorIspb?: StringFieldUpdateOperationsInput | string
    pagadorAgencia?: StringFieldUpdateOperationsInput | string
    pagadorConta?: StringFieldUpdateOperationsInput | string
    pagadorTipoConta?: StringFieldUpdateOperationsInput | string
    recebedorNome?: StringFieldUpdateOperationsInput | string
    recebedorCpfCnpj?: StringFieldUpdateOperationsInput | string
    recebedorIspb?: StringFieldUpdateOperationsInput | string
    recebedorAgencia?: StringFieldUpdateOperationsInput | string
    recebedorConta?: StringFieldUpdateOperationsInput | string
    recebedorTipoConta?: StringFieldUpdateOperationsInput | string
    campoLivre?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: StringFieldUpdateOperationsInput | string
    dataHoraPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
    pixStreamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MensagemPixCreateManyInput = {
    id?: string
    endToEndId: string
    valor: number
    pagadorNome: string
    pagadorCpfCnpj: string
    pagadorIspb: string
    pagadorAgencia: string
    pagadorConta: string
    pagadorTipoConta: string
    recebedorNome: string
    recebedorCpfCnpj: string
    recebedorIspb: string
    recebedorAgencia: string
    recebedorConta: string
    recebedorTipoConta: string
    campoLivre?: string | null
    txId: string
    dataHoraPagamento: Date | string
    pixStreamId?: string | null
  }

  export type MensagemPixUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    endToEndId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    pagadorNome?: StringFieldUpdateOperationsInput | string
    pagadorCpfCnpj?: StringFieldUpdateOperationsInput | string
    pagadorIspb?: StringFieldUpdateOperationsInput | string
    pagadorAgencia?: StringFieldUpdateOperationsInput | string
    pagadorConta?: StringFieldUpdateOperationsInput | string
    pagadorTipoConta?: StringFieldUpdateOperationsInput | string
    recebedorNome?: StringFieldUpdateOperationsInput | string
    recebedorCpfCnpj?: StringFieldUpdateOperationsInput | string
    recebedorIspb?: StringFieldUpdateOperationsInput | string
    recebedorAgencia?: StringFieldUpdateOperationsInput | string
    recebedorConta?: StringFieldUpdateOperationsInput | string
    recebedorTipoConta?: StringFieldUpdateOperationsInput | string
    campoLivre?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: StringFieldUpdateOperationsInput | string
    dataHoraPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensagemPixUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    endToEndId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    pagadorNome?: StringFieldUpdateOperationsInput | string
    pagadorCpfCnpj?: StringFieldUpdateOperationsInput | string
    pagadorIspb?: StringFieldUpdateOperationsInput | string
    pagadorAgencia?: StringFieldUpdateOperationsInput | string
    pagadorConta?: StringFieldUpdateOperationsInput | string
    pagadorTipoConta?: StringFieldUpdateOperationsInput | string
    recebedorNome?: StringFieldUpdateOperationsInput | string
    recebedorCpfCnpj?: StringFieldUpdateOperationsInput | string
    recebedorIspb?: StringFieldUpdateOperationsInput | string
    recebedorAgencia?: StringFieldUpdateOperationsInput | string
    recebedorConta?: StringFieldUpdateOperationsInput | string
    recebedorTipoConta?: StringFieldUpdateOperationsInput | string
    campoLivre?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: StringFieldUpdateOperationsInput | string
    dataHoraPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
    pixStreamId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PixStreamCreateInput = {
    id?: string
    interactionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mensagens?: MensagemPixCreateNestedManyWithoutPixStreamInput
  }

  export type PixStreamUncheckedCreateInput = {
    id?: string
    interactionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    mensagens?: MensagemPixUncheckedCreateNestedManyWithoutPixStreamInput
  }

  export type PixStreamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagens?: MensagemPixUpdateManyWithoutPixStreamNestedInput
  }

  export type PixStreamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    mensagens?: MensagemPixUncheckedUpdateManyWithoutPixStreamNestedInput
  }

  export type PixStreamCreateManyInput = {
    id?: string
    interactionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PixStreamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PixStreamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PixStreamNullableScalarRelationFilter = {
    is?: PixStreamWhereInput | null
    isNot?: PixStreamWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MensagemPixCountOrderByAggregateInput = {
    id?: SortOrder
    endToEndId?: SortOrder
    valor?: SortOrder
    pagadorNome?: SortOrder
    pagadorCpfCnpj?: SortOrder
    pagadorIspb?: SortOrder
    pagadorAgencia?: SortOrder
    pagadorConta?: SortOrder
    pagadorTipoConta?: SortOrder
    recebedorNome?: SortOrder
    recebedorCpfCnpj?: SortOrder
    recebedorIspb?: SortOrder
    recebedorAgencia?: SortOrder
    recebedorConta?: SortOrder
    recebedorTipoConta?: SortOrder
    campoLivre?: SortOrder
    txId?: SortOrder
    dataHoraPagamento?: SortOrder
    pixStreamId?: SortOrder
  }

  export type MensagemPixAvgOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type MensagemPixMaxOrderByAggregateInput = {
    id?: SortOrder
    endToEndId?: SortOrder
    valor?: SortOrder
    pagadorNome?: SortOrder
    pagadorCpfCnpj?: SortOrder
    pagadorIspb?: SortOrder
    pagadorAgencia?: SortOrder
    pagadorConta?: SortOrder
    pagadorTipoConta?: SortOrder
    recebedorNome?: SortOrder
    recebedorCpfCnpj?: SortOrder
    recebedorIspb?: SortOrder
    recebedorAgencia?: SortOrder
    recebedorConta?: SortOrder
    recebedorTipoConta?: SortOrder
    campoLivre?: SortOrder
    txId?: SortOrder
    dataHoraPagamento?: SortOrder
    pixStreamId?: SortOrder
  }

  export type MensagemPixMinOrderByAggregateInput = {
    id?: SortOrder
    endToEndId?: SortOrder
    valor?: SortOrder
    pagadorNome?: SortOrder
    pagadorCpfCnpj?: SortOrder
    pagadorIspb?: SortOrder
    pagadorAgencia?: SortOrder
    pagadorConta?: SortOrder
    pagadorTipoConta?: SortOrder
    recebedorNome?: SortOrder
    recebedorCpfCnpj?: SortOrder
    recebedorIspb?: SortOrder
    recebedorAgencia?: SortOrder
    recebedorConta?: SortOrder
    recebedorTipoConta?: SortOrder
    campoLivre?: SortOrder
    txId?: SortOrder
    dataHoraPagamento?: SortOrder
    pixStreamId?: SortOrder
  }

  export type MensagemPixSumOrderByAggregateInput = {
    valor?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type MensagemPixListRelationFilter = {
    every?: MensagemPixWhereInput
    some?: MensagemPixWhereInput
    none?: MensagemPixWhereInput
  }

  export type MensagemPixOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PixStreamCountOrderByAggregateInput = {
    id?: SortOrder
    interactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PixStreamMaxOrderByAggregateInput = {
    id?: SortOrder
    interactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PixStreamMinOrderByAggregateInput = {
    id?: SortOrder
    interactionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PixStreamCreateNestedOneWithoutMensagensInput = {
    create?: XOR<PixStreamCreateWithoutMensagensInput, PixStreamUncheckedCreateWithoutMensagensInput>
    connectOrCreate?: PixStreamCreateOrConnectWithoutMensagensInput
    connect?: PixStreamWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PixStreamUpdateOneWithoutMensagensNestedInput = {
    create?: XOR<PixStreamCreateWithoutMensagensInput, PixStreamUncheckedCreateWithoutMensagensInput>
    connectOrCreate?: PixStreamCreateOrConnectWithoutMensagensInput
    upsert?: PixStreamUpsertWithoutMensagensInput
    disconnect?: PixStreamWhereInput | boolean
    delete?: PixStreamWhereInput | boolean
    connect?: PixStreamWhereUniqueInput
    update?: XOR<XOR<PixStreamUpdateToOneWithWhereWithoutMensagensInput, PixStreamUpdateWithoutMensagensInput>, PixStreamUncheckedUpdateWithoutMensagensInput>
  }

  export type MensagemPixCreateNestedManyWithoutPixStreamInput = {
    create?: XOR<MensagemPixCreateWithoutPixStreamInput, MensagemPixUncheckedCreateWithoutPixStreamInput> | MensagemPixCreateWithoutPixStreamInput[] | MensagemPixUncheckedCreateWithoutPixStreamInput[]
    connectOrCreate?: MensagemPixCreateOrConnectWithoutPixStreamInput | MensagemPixCreateOrConnectWithoutPixStreamInput[]
    createMany?: MensagemPixCreateManyPixStreamInputEnvelope
    connect?: MensagemPixWhereUniqueInput | MensagemPixWhereUniqueInput[]
  }

  export type MensagemPixUncheckedCreateNestedManyWithoutPixStreamInput = {
    create?: XOR<MensagemPixCreateWithoutPixStreamInput, MensagemPixUncheckedCreateWithoutPixStreamInput> | MensagemPixCreateWithoutPixStreamInput[] | MensagemPixUncheckedCreateWithoutPixStreamInput[]
    connectOrCreate?: MensagemPixCreateOrConnectWithoutPixStreamInput | MensagemPixCreateOrConnectWithoutPixStreamInput[]
    createMany?: MensagemPixCreateManyPixStreamInputEnvelope
    connect?: MensagemPixWhereUniqueInput | MensagemPixWhereUniqueInput[]
  }

  export type MensagemPixUpdateManyWithoutPixStreamNestedInput = {
    create?: XOR<MensagemPixCreateWithoutPixStreamInput, MensagemPixUncheckedCreateWithoutPixStreamInput> | MensagemPixCreateWithoutPixStreamInput[] | MensagemPixUncheckedCreateWithoutPixStreamInput[]
    connectOrCreate?: MensagemPixCreateOrConnectWithoutPixStreamInput | MensagemPixCreateOrConnectWithoutPixStreamInput[]
    upsert?: MensagemPixUpsertWithWhereUniqueWithoutPixStreamInput | MensagemPixUpsertWithWhereUniqueWithoutPixStreamInput[]
    createMany?: MensagemPixCreateManyPixStreamInputEnvelope
    set?: MensagemPixWhereUniqueInput | MensagemPixWhereUniqueInput[]
    disconnect?: MensagemPixWhereUniqueInput | MensagemPixWhereUniqueInput[]
    delete?: MensagemPixWhereUniqueInput | MensagemPixWhereUniqueInput[]
    connect?: MensagemPixWhereUniqueInput | MensagemPixWhereUniqueInput[]
    update?: MensagemPixUpdateWithWhereUniqueWithoutPixStreamInput | MensagemPixUpdateWithWhereUniqueWithoutPixStreamInput[]
    updateMany?: MensagemPixUpdateManyWithWhereWithoutPixStreamInput | MensagemPixUpdateManyWithWhereWithoutPixStreamInput[]
    deleteMany?: MensagemPixScalarWhereInput | MensagemPixScalarWhereInput[]
  }

  export type MensagemPixUncheckedUpdateManyWithoutPixStreamNestedInput = {
    create?: XOR<MensagemPixCreateWithoutPixStreamInput, MensagemPixUncheckedCreateWithoutPixStreamInput> | MensagemPixCreateWithoutPixStreamInput[] | MensagemPixUncheckedCreateWithoutPixStreamInput[]
    connectOrCreate?: MensagemPixCreateOrConnectWithoutPixStreamInput | MensagemPixCreateOrConnectWithoutPixStreamInput[]
    upsert?: MensagemPixUpsertWithWhereUniqueWithoutPixStreamInput | MensagemPixUpsertWithWhereUniqueWithoutPixStreamInput[]
    createMany?: MensagemPixCreateManyPixStreamInputEnvelope
    set?: MensagemPixWhereUniqueInput | MensagemPixWhereUniqueInput[]
    disconnect?: MensagemPixWhereUniqueInput | MensagemPixWhereUniqueInput[]
    delete?: MensagemPixWhereUniqueInput | MensagemPixWhereUniqueInput[]
    connect?: MensagemPixWhereUniqueInput | MensagemPixWhereUniqueInput[]
    update?: MensagemPixUpdateWithWhereUniqueWithoutPixStreamInput | MensagemPixUpdateWithWhereUniqueWithoutPixStreamInput[]
    updateMany?: MensagemPixUpdateManyWithWhereWithoutPixStreamInput | MensagemPixUpdateManyWithWhereWithoutPixStreamInput[]
    deleteMany?: MensagemPixScalarWhereInput | MensagemPixScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PixStreamCreateWithoutMensagensInput = {
    id?: string
    interactionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PixStreamUncheckedCreateWithoutMensagensInput = {
    id?: string
    interactionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PixStreamCreateOrConnectWithoutMensagensInput = {
    where: PixStreamWhereUniqueInput
    create: XOR<PixStreamCreateWithoutMensagensInput, PixStreamUncheckedCreateWithoutMensagensInput>
  }

  export type PixStreamUpsertWithoutMensagensInput = {
    update: XOR<PixStreamUpdateWithoutMensagensInput, PixStreamUncheckedUpdateWithoutMensagensInput>
    create: XOR<PixStreamCreateWithoutMensagensInput, PixStreamUncheckedCreateWithoutMensagensInput>
    where?: PixStreamWhereInput
  }

  export type PixStreamUpdateToOneWithWhereWithoutMensagensInput = {
    where?: PixStreamWhereInput
    data: XOR<PixStreamUpdateWithoutMensagensInput, PixStreamUncheckedUpdateWithoutMensagensInput>
  }

  export type PixStreamUpdateWithoutMensagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PixStreamUncheckedUpdateWithoutMensagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    interactionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensagemPixCreateWithoutPixStreamInput = {
    id?: string
    endToEndId: string
    valor: number
    pagadorNome: string
    pagadorCpfCnpj: string
    pagadorIspb: string
    pagadorAgencia: string
    pagadorConta: string
    pagadorTipoConta: string
    recebedorNome: string
    recebedorCpfCnpj: string
    recebedorIspb: string
    recebedorAgencia: string
    recebedorConta: string
    recebedorTipoConta: string
    campoLivre?: string | null
    txId: string
    dataHoraPagamento: Date | string
  }

  export type MensagemPixUncheckedCreateWithoutPixStreamInput = {
    id?: string
    endToEndId: string
    valor: number
    pagadorNome: string
    pagadorCpfCnpj: string
    pagadorIspb: string
    pagadorAgencia: string
    pagadorConta: string
    pagadorTipoConta: string
    recebedorNome: string
    recebedorCpfCnpj: string
    recebedorIspb: string
    recebedorAgencia: string
    recebedorConta: string
    recebedorTipoConta: string
    campoLivre?: string | null
    txId: string
    dataHoraPagamento: Date | string
  }

  export type MensagemPixCreateOrConnectWithoutPixStreamInput = {
    where: MensagemPixWhereUniqueInput
    create: XOR<MensagemPixCreateWithoutPixStreamInput, MensagemPixUncheckedCreateWithoutPixStreamInput>
  }

  export type MensagemPixCreateManyPixStreamInputEnvelope = {
    data: MensagemPixCreateManyPixStreamInput | MensagemPixCreateManyPixStreamInput[]
    skipDuplicates?: boolean
  }

  export type MensagemPixUpsertWithWhereUniqueWithoutPixStreamInput = {
    where: MensagemPixWhereUniqueInput
    update: XOR<MensagemPixUpdateWithoutPixStreamInput, MensagemPixUncheckedUpdateWithoutPixStreamInput>
    create: XOR<MensagemPixCreateWithoutPixStreamInput, MensagemPixUncheckedCreateWithoutPixStreamInput>
  }

  export type MensagemPixUpdateWithWhereUniqueWithoutPixStreamInput = {
    where: MensagemPixWhereUniqueInput
    data: XOR<MensagemPixUpdateWithoutPixStreamInput, MensagemPixUncheckedUpdateWithoutPixStreamInput>
  }

  export type MensagemPixUpdateManyWithWhereWithoutPixStreamInput = {
    where: MensagemPixScalarWhereInput
    data: XOR<MensagemPixUpdateManyMutationInput, MensagemPixUncheckedUpdateManyWithoutPixStreamInput>
  }

  export type MensagemPixScalarWhereInput = {
    AND?: MensagemPixScalarWhereInput | MensagemPixScalarWhereInput[]
    OR?: MensagemPixScalarWhereInput[]
    NOT?: MensagemPixScalarWhereInput | MensagemPixScalarWhereInput[]
    id?: StringFilter<"MensagemPix"> | string
    endToEndId?: StringFilter<"MensagemPix"> | string
    valor?: FloatFilter<"MensagemPix"> | number
    pagadorNome?: StringFilter<"MensagemPix"> | string
    pagadorCpfCnpj?: StringFilter<"MensagemPix"> | string
    pagadorIspb?: StringFilter<"MensagemPix"> | string
    pagadorAgencia?: StringFilter<"MensagemPix"> | string
    pagadorConta?: StringFilter<"MensagemPix"> | string
    pagadorTipoConta?: StringFilter<"MensagemPix"> | string
    recebedorNome?: StringFilter<"MensagemPix"> | string
    recebedorCpfCnpj?: StringFilter<"MensagemPix"> | string
    recebedorIspb?: StringFilter<"MensagemPix"> | string
    recebedorAgencia?: StringFilter<"MensagemPix"> | string
    recebedorConta?: StringFilter<"MensagemPix"> | string
    recebedorTipoConta?: StringFilter<"MensagemPix"> | string
    campoLivre?: StringNullableFilter<"MensagemPix"> | string | null
    txId?: StringFilter<"MensagemPix"> | string
    dataHoraPagamento?: DateTimeFilter<"MensagemPix"> | Date | string
    pixStreamId?: StringNullableFilter<"MensagemPix"> | string | null
  }

  export type MensagemPixCreateManyPixStreamInput = {
    id?: string
    endToEndId: string
    valor: number
    pagadorNome: string
    pagadorCpfCnpj: string
    pagadorIspb: string
    pagadorAgencia: string
    pagadorConta: string
    pagadorTipoConta: string
    recebedorNome: string
    recebedorCpfCnpj: string
    recebedorIspb: string
    recebedorAgencia: string
    recebedorConta: string
    recebedorTipoConta: string
    campoLivre?: string | null
    txId: string
    dataHoraPagamento: Date | string
  }

  export type MensagemPixUpdateWithoutPixStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    endToEndId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    pagadorNome?: StringFieldUpdateOperationsInput | string
    pagadorCpfCnpj?: StringFieldUpdateOperationsInput | string
    pagadorIspb?: StringFieldUpdateOperationsInput | string
    pagadorAgencia?: StringFieldUpdateOperationsInput | string
    pagadorConta?: StringFieldUpdateOperationsInput | string
    pagadorTipoConta?: StringFieldUpdateOperationsInput | string
    recebedorNome?: StringFieldUpdateOperationsInput | string
    recebedorCpfCnpj?: StringFieldUpdateOperationsInput | string
    recebedorIspb?: StringFieldUpdateOperationsInput | string
    recebedorAgencia?: StringFieldUpdateOperationsInput | string
    recebedorConta?: StringFieldUpdateOperationsInput | string
    recebedorTipoConta?: StringFieldUpdateOperationsInput | string
    campoLivre?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: StringFieldUpdateOperationsInput | string
    dataHoraPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensagemPixUncheckedUpdateWithoutPixStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    endToEndId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    pagadorNome?: StringFieldUpdateOperationsInput | string
    pagadorCpfCnpj?: StringFieldUpdateOperationsInput | string
    pagadorIspb?: StringFieldUpdateOperationsInput | string
    pagadorAgencia?: StringFieldUpdateOperationsInput | string
    pagadorConta?: StringFieldUpdateOperationsInput | string
    pagadorTipoConta?: StringFieldUpdateOperationsInput | string
    recebedorNome?: StringFieldUpdateOperationsInput | string
    recebedorCpfCnpj?: StringFieldUpdateOperationsInput | string
    recebedorIspb?: StringFieldUpdateOperationsInput | string
    recebedorAgencia?: StringFieldUpdateOperationsInput | string
    recebedorConta?: StringFieldUpdateOperationsInput | string
    recebedorTipoConta?: StringFieldUpdateOperationsInput | string
    campoLivre?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: StringFieldUpdateOperationsInput | string
    dataHoraPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MensagemPixUncheckedUpdateManyWithoutPixStreamInput = {
    id?: StringFieldUpdateOperationsInput | string
    endToEndId?: StringFieldUpdateOperationsInput | string
    valor?: FloatFieldUpdateOperationsInput | number
    pagadorNome?: StringFieldUpdateOperationsInput | string
    pagadorCpfCnpj?: StringFieldUpdateOperationsInput | string
    pagadorIspb?: StringFieldUpdateOperationsInput | string
    pagadorAgencia?: StringFieldUpdateOperationsInput | string
    pagadorConta?: StringFieldUpdateOperationsInput | string
    pagadorTipoConta?: StringFieldUpdateOperationsInput | string
    recebedorNome?: StringFieldUpdateOperationsInput | string
    recebedorCpfCnpj?: StringFieldUpdateOperationsInput | string
    recebedorIspb?: StringFieldUpdateOperationsInput | string
    recebedorAgencia?: StringFieldUpdateOperationsInput | string
    recebedorConta?: StringFieldUpdateOperationsInput | string
    recebedorTipoConta?: StringFieldUpdateOperationsInput | string
    campoLivre?: NullableStringFieldUpdateOperationsInput | string | null
    txId?: StringFieldUpdateOperationsInput | string
    dataHoraPagamento?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}